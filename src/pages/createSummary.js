import { useEffect, useState } from "react";
import Head from "next/head";

import Spinner from "react-bootstrap/Spinner";
import { Formik } from "formik";
import Navbar from "../components/laypout/nav";
export default function Home() {
  const [textSummary, settextSummary] = useState("");
  const [laoder, setlaoder] = useState(false);
  const [word, setWord] = useState('');
  const [character, setCharacter] = useState('');
  const [counterCheck, setCounterCheck] = useState(0);
  const [resultHistory, setresultHistory] = useState([]);
  function Spinloader() {
    return (
      <Spinner animation="border" role="status">
        <span className="visually-hidden">Loading...</span>
      </Spinner>
    );
  }
  return (
    <>
      <Navbar />
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container">
        <Formik
          initialValues={{
            textarea: "",
            s_type: "Summarize this as friendly",
            s_character: "",
            s_alpha: "",
          }}
          validate={(values) => {
            const errors = {};
            if (!values.textarea) {
              errors.textarea = "Required";
            }
            return errors;
          }}
          onSubmit={async (values, actions, setFieldValue) => {
            var summary;
            setlaoder(true);

            console.log("val", values.s_type);
            if (values.textarea && values.s_type) {
              // const data = values.s_type.concat(`\n\n ${values.textarea}`);
              if (textSummary) {
                summary = textSummary.concat(
                  `. There are ${character} alphabets and ${word} words in this summary`
                );
              }
              fetch("/api/summarize", {
                method: "POST", // or 'PUT'
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({ values, summary }),
              })
                .then((response) => response.json())
                .then((data) => {
                  console.log("Success:", data);
                  settextSummary(data.choices[0].text);
                  setresultHistory([...resultHistory,data.choices[0].text])
                  setCharacter(data.choices[0].text?.length )
                  setWord( data.choices[0].text?.split(" ")?.length )
                  setlaoder(false);
                  setCounterCheck(counterCheck+1)
                })
                .catch((error) => {
                  console.error("Error:", error);
                  setlaoder(false);
                });
            }
          }}
        >
          {(props) => (
            <form onSubmit={props.handleSubmit}>
              <textarea
                className="p text-atea"
                name="textarea"
                id=""
                placeholder="write your message."
                cols="10"
                rows="8"
                onChange={props.handleChange}
                onBlur={props.handleBlur}
                value={props.values.textarea}
              ></textarea>
              {props.errors.textarea && (
                <div style={{ color: "red", paddingTop: "5px" }}>{props.errors.textarea}</div>
              )}
              <p className="p">What Kind of output do you want?</p>

              <div className="select-option">
                <select
                  className="p"
                  name="s_type"
                  value={props.values.s_type}
                  onChange={props.handleChange}
                  onBlur={props.handleBlur}
                  as="Select"
                >
                  <option value="Summarize this as friendly">Friendly</option>
                  <option value="Summarize this as lovely">Lovely</option>
                  <option value="Summarize this as aggressively">agressively</option>
                  <option value="Summarize this as perfectly">Perfectly</option>
                </select>
              </div>
              {textSummary && (
                <>
                  <div className="flex mb-5 charcter-length-block">
                    <div className="mr-3">
                      <p className="p">Characters</p>
                      <div className="input_field">
                        <input
                          name="s_character"
                          type="text"
                          onChange={e=>setCharacter(e.target.value)}

                          value={String(character)}
                        />
                      </div>
                    </div>
                    <div>
                      <p className="p">Words</p>
                      <div className="input_field">
                        <input
                          name="s_alpha"
                          type="text"
                          onChange={e=>setWord(e.target.value)}
                          value={word}
                        />
                      </div>
                    </div>
                  </div>
                  <h2 className="text-bold"> Summarize Text</h2>
                  <textarea
                    className="mb-3 p text-atea"
                    name="s_text"
                    id=""
                    placeholder="write your message."
                    cols="10"
                    rows="8"
                    value={textSummary}
                    onChange={(e)=>settextSummary(e.target.value)}

                  ></textarea>
                </>
              )}

              <button className="primary-btn p" type="submit">
                {laoder ? <Spinloader /> : counterCheck === 0 ? "Generate Summary" : `Generate Summary ${counterCheck} Attempt` }
              </button>
            </form>
          )}
        </Formik>
        <br />
        {!!resultHistory.length && <h1 className="text-['30px']">Each attempt results</h1>}
        {resultHistory?.map((data, counter)=>{
          return <>
          <br />
          <p>Attempt {counter+1}</p>
          <p>{data}</p><br /></>
        })}
      </div>
    </>
  );
}
